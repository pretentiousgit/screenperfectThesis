Table of Contents
BACKGROUND AND MOTIVATION	1
RESEARCH QUESTION	4
INITIAL APPROACH	10
STRUCTURE OF THE REMAINDER OF THIS DOCUMENT	13


Research Question
My aptitude for computer technology combined with my artistic environment has resulted in me repairing a lot of machines. Computers need fixing for many reasons, but usually, they need fixing because the people making software have little experience with people whose primary skills are not related to computer use. The developers and their organizations are isolated from the broader population of people who use these devices. This is problematic, especially in the case of the arts. 

The arts and the humanities are tasked with producing both North America’s culture and its record of its culture. Computers are how we produce this work in 2013, and they are not simple or direct machines. A computer in 2013 is a running compromise between software that works pretty well most of the time and hardware that is generally reliable. To use these tools is a specific skill set. Using them well is as specific as using a paintbrush well, and the software that comes from that skillset then needs to compromise. People do learn, but the number of people for whom computer use itself will be a delight is as limited as it is for any other specialized skill. This is problematic, because art generation, and the production of artistic project ideas, is itself difficult. The more limited and specific the skill sets required to use these tools, the more difficult it is to include a diversity of voices in the cultural production of genuinely contemporary work. 

When artists are excluded from technology, culture splits on lines of privilege. There are then artists, who make art, and technologists, who make technology but do not see themselves as particularly creative, or, more to the point, particularly involved in any responsibility for the ideas encoded in their work. Technology is not neutral. It is authored, and where there is authorship, there is a responsibility for ideas. When large groups are left out of communication media, particularly those tasked with producing the language with which culture speaks to itself, there comes a disconnect in our sense of self, and how we are publicly represented. 

Video games are the newest of the cultural production engines. A good game, as described by the MDA, first involves engaging mechanics – the loop systems of reward and scoring – then graphics to create a world, then sound to fill out that world. The controls are weighted this way and that, but the most profitable games are presently power fantasies. To isolated children, these are appealing worlds. There is space for a kind of formalist ultra-realism in the violence, and sometimes some breadth in which princess must be rescued, but the stories are remarkably similar.

The value of a broad range of voices in any cultural practice should be self-evident, but video games are unique. Unlike any other discipline, the basic tools for games tend to be expensive, and the toolsets that exist to generate games support quite specific mechanics. This means that art games are unfairly compared to commercial games produced with the same media. The commercial games get to set the ground of the conversation, however; the subjectivity of the producer of the second-stage tools is therefore denied. They are disappeared into the system, their work only revealed by which elements an artist can or cannot subvert. This is problematic, as the second-stage producer in large part controls what the final creative director can make happen. Without the correct tools, and cooperative tools, it is challenging to make new things.
Moore’s Law is slowing down, as things said to be endless seem to do. In the last ten years, processor cycles have not meaningfully increased. Parallelism, whereby more processors are added to the same task, is useful in processing graphics, but by far the most significant advances have been in using power more carefully. The most interesting new ideas in technology, hardware especially, are no longer formed or limited by the direct power of the machine. The new research questions in games are no longer how to get the best graphics - apply money to animator, wait six months - but are rather in how to get the most interesting experiences for the investment.

The problem of interesting experiences is not trivial. Video games offer an economically advantageous distraction engine, a way to enact an artificial life where, in the words of Leigh Alexander, “I will probably never pay off a mortgage in real life. This game is as close as I will ever get, I realize.” (Kotaku 2013). Allowing a diverse range of voices the ease of access to portray their own games, their own modes of being, is a way of making those voices more real, of offering an alternate human experience to the “asshole simulator” genres manufactured at much higher budgets.

My research question is to ask how to make some of those tools, for people who do not want to make conventional digital games. I am basing my research on the Twine engine, for authoring branching text narratives, and adding an element of irony by including video, to make a video||game. This is an exploration of what a good creative tool can be, how is it different from a bad tool or an inaccessible tool.
My secondary research questions address why is it important to produce polyphony of artistic experience, and how to encourage more diverse voices in this new area of cultural production. How does working collaboratively affect tool development, and what alternate paths to learning are provided by this style of work? What are the underlying assumptions that should be included in code? What ways of working are most reproducible? Is code itself a creative practice, and how can that creative practice be described?
 

Initial Approach
My initial approach and research method to this work is based on the Agile Manifesto, a software development methodology that opposes siloed, top-down software development. I have paired Agile development with the work of Helene Cixous, whose “Laugh of the Medusa” provided a template for ecriture feminine, an argument for women writing of their own experience in order to be made visible. This work is deeply related to various texts that have appeared in the years since: Haraway’s Cyborg Manifesto, TIQQUN’s Preliminary Materials Towards A Theory of the Young-Girl. All of these are academic constructions of femininity as it is seen in relation to technology; they are feminist in the formal sense of the word, as versus the deeply pragmatic sense of equal pay for equal work.
This approach addresses women as an alien construct to the more conventional world of technology, which has been recently associated with a masculinist performance that is unnecessary for the pure structure of good rules and the development, through that, of good software. My initial approach is to pair with an artist who had a game idea, take that idea, and then make it reproducible. Reproduction is, after all, the province of cyborgs: we control our biological systems, and in doing so, we have conquered what was once a hard-built destiny. By making the consequences of biological sex into a more pliant construct of gender, we have transformed what we must be to what we might be.
This work has been difficult, but I believe it to be important, not so much for the software itself - a proof of concept - but because it is important to provide software that permits people to access new technology. I am not alone in thinking this. The Arduino project, a microcontroller designed to make electronics more accessible to artists, and the Processing project, a simplified version of Java intended to improve the experience of scripting visual effects for artists, are both dedicated to the same ideals. Underlying both projects, as well as the broader Maker movement, is an ideal of participation in one’s own work.
Put simply, people who write code, particularly using the Agile methodology, are engaging in creative practice themselves, and they then display that creative practice through the artists who repurpose their work. This is a different design pattern than technology conventionally pursues, where the work is designed in isolation and released. I am using the Agile method to develop software because it does not require that one knows what the end shape of the software will be in order to pursue the end goal. Agile requires instead that developers pursue goals in sight, always keeping their development loose enough that they can repurpose their work without much effort, and it is ideal for working with artists.
What might be is a developmental model for software that permits transition in scope from the singular, minimum-viable-product model, to a model that builds on itself until complete. A small, perfect thing that does one thing very well, which permits artists to pair their own practice with a software built expressly to make their lives easier, for not too much money. This is important, because my initial approach assumes artists to be undercompensated for their work. Although artists are the central agents of production of all the cultural capital - the invisible value - of the culture industry, they are not the prime beneficiaries of the financial system that backs, stores, and distributes that capital. Therefore, software for artists needs to be inexpensive, and set up to be almost trivially easy to use. This kind of invisibility is the invisibility of good management, of any type of good administration; like housekeeping, the code involved disappears until something goes wrong.
To test this idea, I have approached people to produce video|games with the screenPerfect software in the context of a voluntary game jam – a type of collaborative space where participants work with digital tools to generate new, raw games in a limited window – and then compiling the results into an arcade machine for presentation. 
Structure of the remainder of this document
The remainder of this document is structured as follows: Chapter Three, Embodiment and Games, addresses some of the issues present in having only a limited context for machine work. In it, I address Anna Anthropy’s Rise of of the Videogame Zinesters, the primary text of independent and self-reflective game based production, and contrast with Kristeva’s Powers of Horror, the primary text of the abjectionist movement of the 1970s and 1990s. I argue that the text of masochism and the text of dis/embodied games are linked.  Chapter Two, Literature Review, covers much of the reading I have done for this work and sets up the context of video games as big-budget escapism, while contrasting feminist writing on the cyborg and the history of computing to express that code is historically very much a women’s discipline, and address some of how that has been lost. Chapter Four, Design Research, addresses the wins, losses, and trades of using a mix of open and closed-source software to answer the problem of accessible tools, with some thoughts on what access can be constituted to be. Chapter Five, Issues In The Economics of Open Creative Practice, addresses some pernicious issues in the economy of open hardware, such as the lack of quality control and the sense of second-class citizen status that such games may have, and offers a few paths forward.  Chapter Six is my conclusion, which summarizes and re-states my arguments. 

Appendix A is a list of my gitHub commit comments over the course of the writing of the game, which detail the direction of how someone reasonably confident with computers and programming learns a new language. Appendix B is a list of the games made to date with screenPerfect and their installation sites, along with links to where they might be found for future installation.
